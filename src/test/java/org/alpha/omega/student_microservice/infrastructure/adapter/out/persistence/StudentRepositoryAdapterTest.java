package org.alpha.omega.student_microservice.infrastructure.adapter.out.persistence;

import org.alpha.omega.student_microservice.domain.model.Student;
import org.alpha.omega.student_microservice.infrastructure.adapter.out.persistence.mapper.StudentPersistenceMapperImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.r2dbc.DataR2dbcTest;
import org.springframework.context.annotation.Import;
import reactor.core.publisher.Flux;
import reactor.test.StepVerifier;

import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * DataR2dbcTest: Configure the persistence part with R2DBC and H2 in memory.
 * Import (value = {ProductRepositoryAdapter.class, ProductMapperImpl.class}): Says to Spring that load the Adapter
 * and the Mapper generated by MapStruct.
 * This a test of real integration of the Adapter with the H2 database in memory.
 */
@DataR2dbcTest
@Import(value = {StudentRepositoryAdapter.class, StudentPersistenceMapperImpl.class})
class StudentRepositoryAdapterTest {

    @Autowired
    private StudentRepositoryAdapter adapter;

    @Autowired
    private StudentRepository repository;

    @BeforeEach
    void setUp() {
        this.repository.deleteAll().block();
    }

    @Test
    void testSaveStudent() {
        //Given
        Student studentToRecord = Student.builder()
                .id(777)
                .name("Jesús")
                .lastName("Salvador")
                .status(Boolean.TRUE)
                .age(33)
                .build();

        //When and Then
        StepVerifier.create(this.adapter.save(studentToRecord))
                .expectNextMatches(student -> student.getId().equals(studentToRecord.getId()) &&
                        student.getName().equals(studentToRecord.getName()) &&
                        student.getLastName().equals(studentToRecord.getLastName()) &&
                        student.getStatus().equals(studentToRecord.getStatus()) &&
                        student.getAge().equals(studentToRecord.getAge()))
                .verifyComplete();
    }

    @Test
    void testFindByStudentId() {
        //Given
        StudentEntity studentToRecord = new StudentEntity(null, 777, "Jesús", "Salvador", Boolean.TRUE, 33);
        StudentEntity studentSaved = this.repository.save(studentToRecord).block();

        //When and Then
        StepVerifier.create(this.adapter.findByStudentId(studentToRecord.id()))
                .expectNextMatches(student -> {
                    assertNotNull(studentSaved);
                    return student.getId().equals(studentSaved.id()) &&
                            student.getName().equals(studentSaved.name()) &&
                            student.getLastName().equals(studentSaved.lastName()) &&
                            student.getStatus().equals(studentSaved.status()) &&
                            student.getAge().equals(studentSaved.age());
                })
                .verifyComplete();
    }

    @Test
    void testFindAllStudents() {
        //Given
        StudentEntity jsalvador = new StudentEntity(null, 777, "Jesús", "Salvador", Boolean.TRUE, 33);
        StudentEntity sfulgencio = new StudentEntity(null, 246, "Stivet", "Fulgencio", Boolean.FALSE, 41);
        StudentEntity mruiz = new StudentEntity(null, 864, "Mary", "Ruiz", Boolean.TRUE, 30);
        this.repository.saveAll(Flux.just(jsalvador, sfulgencio, mruiz)).collectList().block();

        //When and Then
        StepVerifier.create(this.adapter.findAll())
                .expectNextMatches(student -> student.getId().equals(jsalvador.id()) && student.getName().equals(jsalvador.name()))
                .expectNextMatches(student -> student.getId().equals(sfulgencio.id()) && student.getName().equals(sfulgencio.name()))
                .expectNextMatches(student -> student.getId().equals(mruiz.id()) && student.getName().equals(mruiz.name()))
                .verifyComplete();
    }

    @Test
    void testFindActiveStudents() {
        //Given
        StudentEntity jsalvador = new StudentEntity(null, 777, "Jesús", "Salvador", Boolean.TRUE, 33);
        StudentEntity sfulgencio = new StudentEntity(null, 246, "Stivet", "Fulgencio", Boolean.FALSE, 41);
        StudentEntity mruiz = new StudentEntity(null, 864, "Mary", "Ruiz", Boolean.TRUE, 30);
        this.repository.saveAll(Flux.just(jsalvador, sfulgencio, mruiz)).collectList().block();

        //When and Then
        StepVerifier.create(this.adapter.findByStatus(Boolean.TRUE))
                .expectNextMatches(activeStudent -> activeStudent.getId().equals(jsalvador.id()) && activeStudent.getName().equals(jsalvador.name()))
                .expectNextMatches(activeStudent -> activeStudent.getId().equals(mruiz.id()) && activeStudent.getName().equals(mruiz.name()))
                .verifyComplete();
    }
}
